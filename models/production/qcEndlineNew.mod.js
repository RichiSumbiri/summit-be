import { DataTypes } from "sequelize";
import db from "../../config/database.js";

export const QueryEndSumSchSize = `-- QUERY SCHEDULE SIZE QC ENDLINE
SELECT 
    M.SCH_ID, M.SIZE_CODE,
    SUM(M.SCH_QTY) SCH_QTY,
    SUM(M.TTL_SEWING_IN) LOADING_QTY,
    SUM(M.BDL_QTY) BDL_TOTAL,
    SUM(M.TOTAL_CHECKED) TOTAL_CHECKED,
    SUM(M.GOOD) GOOD,
    SUM(M.DEFECT_BS) DEFECT_BS,
    SUM(M.TTL_SEWING_IN - M.GOOD) BALANCE,
    SUM(M.TTL_SEWING_OUT) TTL_TRANSFER,
    SUM(M.GOOD - M.TTL_SEWING_OUT) BAL_TRANSFER, 
    SUM(M.SCH_QTY - M.TTL_SEWING_OUT) BAL_SCHEDULE
FROM (
    SELECT a.SCH_ID, a.SIZE_CODE,
        IFNULL(a.SCH_SIZE_QTY, 0) AS SCH_QTY,
        IFNULL(e.TTL_SEWING_IN, 0) AS TTL_SEWING_IN,
        IFNULL(e.BDL_QTY, 0) AS BDL_QTY,
        IFNULL(f.REPAIRED + f.RTT, 0) AS GOOD,
        IFNULL(f.TOTAL_CHECKED, 0) AS TOTAL_CHECKED,
        IFNULL(f.DEFECT + f.BS, 0) AS DEFECT_BS,
        IFNULL(g.TTL_SEWING_OUT, 0) AS TTL_SEWING_OUT
    FROM weekly_sch_size a  
    LEFT JOIN (
        SELECT a.SCH_ID, b.ORDER_SIZE, COUNT(*) BDL_QTY, SUM(b.ORDER_QTY) TTL_SEWING_IN
        FROM scan_sewing_in a 
        LEFT JOIN order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
        WHERE a.SCH_ID IN (
	        SELECT a.SCH_ID FROM weekly_prod_sch_detail a 
			  LEFT JOIN item_siteline b ON (a.SCHD_ID_SITELINE = b.ID_SITELINE)
			  WHERE a.SCHD_PROD_DATE = :schDate AND a.SCHD_SITE = :sitename AND b.LINE_NAME = :linename 
        )
        GROUP BY a.SCH_ID, b.ORDER_SIZE
    ) e ON(a.SCH_ID = e.SCH_ID AND a.SIZE_CODE = e.ORDER_SIZE)
    LEFT JOIN (
        SELECT
            a.ENDLINE_SCH_ID,
            a.ENDLINE_PLAN_SIZE,
            SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS RTT,
            SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'DEFECT' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS DEFECT,
            SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'BS' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS BS,
            SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'DEFECT' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR = 'Y' THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS REPAIRED,
            SUM(CASE WHEN a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS TOTAL_CHECKED
        FROM qc_endline_output a
        WHERE a.ENDLINE_SCH_ID IN (
	        SELECT a.SCH_ID FROM weekly_prod_sch_detail a 
			  LEFT JOIN item_siteline b ON (a.SCHD_ID_SITELINE = b.ID_SITELINE)
			  WHERE a.SCHD_PROD_DATE = :schDate AND a.SCHD_SITE = :sitename AND b.LINE_NAME = :linename 
        ) 
        GROUP BY a.ENDLINE_SCH_ID, a.ENDLINE_PLAN_SIZE
    ) f ON(a.SCH_ID = f.ENDLINE_SCH_ID AND f.ENDLINE_PLAN_SIZE = a.SIZE_CODE)
    LEFT JOIN (
        SELECT a.SCH_ID, b.ORDER_SIZE, SUM(b.ORDER_QTY) TTL_SEWING_OUT
        FROM scan_sewing_out a 
        LEFT JOIN order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
        WHERE a.SCH_ID IN (
	        SELECT a.SCH_ID FROM weekly_prod_sch_detail a 
			  LEFT JOIN item_siteline b ON (a.SCHD_ID_SITELINE = b.ID_SITELINE)
			  WHERE a.SCHD_PROD_DATE = :schDate AND a.SCHD_SITE = :sitename AND b.LINE_NAME = :linename 
        )
        GROUP BY a.SCH_ID, b.ORDER_SIZE
    ) g ON(a.SCH_ID = g.SCH_ID AND a.SIZE_CODE = g.ORDER_SIZE)
    WHERE a.SCH_ID IN (
        SELECT a.SCH_ID FROM weekly_prod_sch_detail a 
		  LEFT JOIN item_siteline b ON (a.SCHD_ID_SITELINE = b.ID_SITELINE)
		  WHERE a.SCHD_PROD_DATE = :schDate AND a.SCHD_SITE = :sitename AND b.LINE_NAME = :linename
    ) AND a.SCH_SIZE_QTY <> 0
) M 
GROUP BY M.SCH_ID, M.SIZE_CODE`;

export const QueryQrEndlineActive = `-- QUERY BARCODE QC ENDLINE
SELECT 
    M.SCH_ID,
    M.SCHD_ID,
    M.ORDER_SIZE,
    M.BARCODE_SERIAL, 
    M.BUNDLE_SEQUENCE,
    M.BUYER_CODE,
	  M.MO_NO, 
	  M.ORDER_COLOR,
    M.SCAN_DATE,
    M.ORDER_QTY,
    M.TOTAL_CHECKED,
    M.GOOD,
    M.DEFECT_BS,
    M.RTT,
    M.DEFECT,
    M.REPAIRED,
    M.BS,
    M.TRANSFER_QTY,
    M.ORDER_QTY-M.TOTAL_CHECKED BALANCE,
    M.GOOD-M.TRANSFER_QTY BAL_TRANSFER,
    M.ORDER_QTY - M.GOOD BAL_SCHEDULE,
    M.RETURN_STATUS,
    M.COUNT_SPLIT
FROM (
	SELECT a.SCH_ID, a.SCHD_ID, a.BARCODE_SERIAL, c.BUNDLE_SEQUENCE, b.BUYER_CODE, b.MO_NO, b.ORDER_COLOR, 
	DATE(a.SEWING_SCAN_TIME) SCAN_DATE,
	 b.ORDER_SIZE, b.ORDER_QTY, 
	IFNULL(d.REPAIRED + d.RTT, 0) AS GOOD,
	IFNULL(d.TOTAL_CHECKED, 0) AS TOTAL_CHECKED,
	IFNULL(d.DEFECT + d.BS, 0) AS DEFECT_BS,
	IFNULL(d.RTT, 0) AS RTT,
	IFNULL(d.REPAIRED, 0) AS REPAIRED,
	IFNULL(d.DEFECT, 0) AS DEFECT,
	IFNULL(d.BS, 0) AS BS,
	CASE WHEN e.BARCODE_SERIAL IS NOT NULL THEN IFNULL(e.TRANSFER_QTY, b.ORDER_QTY) ELSE 0 END AS TRANSFER_QTY,
	f.RETURN_STATUS, g.COUNT_SPLIT
	FROM scan_sewing_in a 
	LEFT JOIN order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
	LEFT JOIN order_qr_generate c ON a.BARCODE_SERIAL = c.BARCODE_SERIAL
	LEFT JOIN (
			SELECT
			   a.ENDLINE_SCH_ID,
			   a.BARCODE_SERIAL,
			   a.ENDLINE_PLAN_SIZE,
			   SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS RTT,
			   SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'DEFECT' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS DEFECT,
			   SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'BS' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS BS,
			   SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'DEFECT' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR = 'Y' THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS REPAIRED,
			   SUM(CASE WHEN a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS TOTAL_CHECKED
			FROM qc_endline_output a
			WHERE a.ENDLINE_SCH_ID IN (
			  SELECT a.SCH_ID FROM weekly_prod_sch_detail a 
			  LEFT JOIN item_siteline b ON (a.SCHD_ID_SITELINE = b.ID_SITELINE)
			  WHERE a.SCHD_PROD_DATE = :schDate AND a.SCHD_SITE = :sitename AND b.LINE_NAME = :linename 
			) 
			GROUP BY a.ENDLINE_SCH_ID,
			   a.BARCODE_SERIAL,
			   a.ENDLINE_PLAN_SIZE
	) d ON d.BARCODE_SERIAL = a.BARCODE_SERIAL AND b.ORDER_SIZE = d.ENDLINE_PLAN_SIZE
	LEFT JOIN (
			SELECT  a.BARCODE_MAIN BARCODE_SERIAL, SUM(b.NEW_QTY) TRANSFER_QTY
			FROM scan_sewing_out a 
			LEFT JOIN scan_sewing_qr_split b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
			WHERE a.SCH_ID IN (
					SELECT a.SCH_ID FROM weekly_prod_sch_detail a 
				  LEFT JOIN item_siteline b ON (a.SCHD_ID_SITELINE = b.ID_SITELINE)
				  WHERE a.SCHD_PROD_DATE = :schDate AND a.SCHD_SITE = :sitename AND b.LINE_NAME = :linename 
			)
			GROUP BY a.BARCODE_MAIN
	) e ON e.BARCODE_SERIAL = a.BARCODE_SERIAL
	LEFT JOIN (
			  SELECT  a.BARCODE_SERIAL, COUNT(*) AS  RETURN_STATUS
			  FROM scan_sewing_return a 
			  WHERE a.CONFIRM_STATUS = '0' AND a.SEWING_SCAN_LOCATION = :sitename
			  GROUP BY a.BARCODE_SERIAL
	) f ON f.BARCODE_SERIAL = a.BARCODE_SERIAL
	LEFT JOIN (
				SELECT  a.BARCODE_MAIN BARCODE_SERIAL, COUNT(*) COUNT_SPLIT
				FROM scan_sewing_qr_split a 
				WHERE a.SCH_ID IN (
						SELECT a.SCH_ID FROM weekly_prod_sch_detail a 
					  LEFT JOIN item_siteline b ON (a.SCHD_ID_SITELINE = b.ID_SITELINE)
					  WHERE a.SCHD_PROD_DATE = :schDate AND a.SCHD_SITE = :sitename AND b.LINE_NAME = :linename 
				)
				GROUP BY a.BARCODE_MAIN
	) g ON g.BARCODE_SERIAL = a.BARCODE_SERIAL
	WHERE a.SCH_ID IN (
	  SELECT a.SCH_ID FROM weekly_prod_sch_detail a 
	  LEFT JOIN item_siteline b ON (a.SCHD_ID_SITELINE = b.ID_SITELINE)
	  WHERE a.SCHD_PROD_DATE = :schDate AND a.SCHD_SITE = :sitename AND b.LINE_NAME = :linename 
	)
) M`;

export const QryQrSelectCheckResult = `SELECT
a.ENDLINE_SCH_ID,
a.BARCODE_SERIAL,
a.ENDLINE_PLAN_SIZE,
b.ORDER_QTY,
SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS RTT,
SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'DEFECT' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS DEFECT,
SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'BS' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS BS,
SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'DEFECT' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR = 'Y' THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS REPAIRED,
SUM(CASE WHEN a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS TOTAL_CHECKED
FROM qc_endline_output a
LEFT JOIN order_detail b ON b.BARCODE_SERIAL = a.BARCODE_SERIAL
WHERE a.BARCODE_SERIAL = :barcodeSerial  AND a.ENDLINE_OUT_UNDO IS NULL 
GROUP BY a.ENDLINE_SCH_ID,
a.BARCODE_SERIAL,
a.ENDLINE_PLAN_SIZE`;

export const QryListQrDefect = `SELECT a.ENDLINE_OUT_ID, 
a.BARCODE_SERIAL,
a.ENDLINE_SCHD_ID, 
a.ENDLINE_OUT_TYPE, 
a.ENDLINE_PORD_TYPE, 
a.ENDLINE_PLAN_SIZE, 
a.ENDLINE_DEFECT_CODE, 
a.ENDLINE_PART_CODE,
c.PART_NAME, b.DEFECT_NAME, 
a.ENDLINE_SCHD_DATE, DATE(a.ENDLINE_ADD_TIME) ADD_DATE, a.ENDLINE_TIME , a.ENDLINE_ID_SITELINE
FROM   qc_endline_output a
LEFT JOIN item_defect_internal b ON b.DEFECT_SEW_CODE = a.ENDLINE_DEFECT_CODE
LEFT JOIN item_part c ON c.PART_CODE = a.ENDLINE_PART_CODE
WHERE a.BARCODE_SERIAL = :barcodeSerial
AND a.ENDLINE_OUT_TYPE = 'DEFECT' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR IS NULL
ORDER BY a.ENDLINE_TIME`;

export const QryCheckTtlCheck = `SELECT
b.ORDER_QTY,
SUM(CASE WHEN a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS TOTAL_CHECKED
FROM qc_endline_output a
LEFT JOIN order_detail b ON b.BARCODE_SERIAL = a.BARCODE_SERIAL
WHERE a.BARCODE_SERIAL = :barcodeSerial
GROUP BY a.ENDLINE_SCH_ID,
a.BARCODE_SERIAL,
a.ENDLINE_PLAN_SIZE`;

//qc endline undo
export const EndlineUndoNew = db.define(
  "qc_endline_undo_qr",
  {
    UNDO_ID: {
      type: DataTypes.STRING,
      primaryKey: true,
      allowNull: false,
    },
    BARCODE_SERIAL: { type: DataTypes.STRING, allowNull: false },
    SCHD_ID: { type: DataTypes.INTEGER, allowNull: false },
    USER_ID: { type: DataTypes.INTEGER, allowNull: false },
    UNDO_RTT: { type: DataTypes.INTEGER },
    UNDO_DEFECT: { type: DataTypes.INTEGER },
    UNDO_BS: { type: DataTypes.INTEGER },
    UNDO_REPAIR: { type: DataTypes.INTEGER },
    ADD_ID: { type: DataTypes.INTEGER },
    MOD_ID: { type: DataTypes.INTEGER },
    ADD_DATE: { type: DataTypes.DATE },
    MOD_DATE: { type: DataTypes.DATE },
  },
  {
    freezeTableName: true,
    createdAt: "ADD_DATE",
    updatedAt: "MOD_DATE",
  }
);

//query for find last record Defect RTT BS
export const QueryGetLastRttDefBSNew = `SELECT * FROM qc_endline_output a 
WHERE a.BARCODE_SERIAL = :barcodeSerial
  AND a.ENDLINE_OUT_TYPE = :type  
  AND a.ENDLINE_PLAN_SIZE = :size
  AND a.ENDLINE_PORD_TYPE = :prodtype
  AND DATE(a.ENDLINE_ADD_TIME) = CURDATE()
  AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR IS NULL 
ORDER BY a.ENDLINE_OUT_ID DESC LIMIT 1`;

//query for fin last record Repaird
export const QueryGetLastRepairdNew = `SELECT * FROM qc_endline_output a 
WHERE a.BARCODE_SERIAL = :barcodeSerial
  AND a.ENDLINE_OUT_TYPE = 'DEFECT' 
  AND a.ENDLINE_PLAN_SIZE = :size
  AND a.ENDLINE_PORD_TYPE = :prodtype
  AND DATE(a.ENDLINE_ADD_TIME) = CURDATE()
AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR = 'Y'
ORDER BY a.ENDLINE_OUT_ID DESC LIMIT 1`;

export const getListSplitQr = `SELECT  a.BARCODE_SERIAL, a.BARCODE_MAIN, a.BARCODE_SEQ, a.SCH_ID, a.SCHD_ID, a.NEW_QTY,
CASE WHEN b.BARCODE_SERIAL THEN a.NEW_QTY ELSE 0 END AS TRANSFER_QTY
FROM scan_sewing_qr_split a
LEFT JOIN scan_sewing_out b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
WHERE a.BARCODE_MAIN = :barcodeSerial `;

export const QueryGetQrPendNew = `-- QUERY LIST PENDING QR
SELECT 
    M.SCH_ID,
    M.SCHD_ID,
    M.ORDER_SIZE,
    M.BARCODE_SERIAL, 
    M.BUNDLE_SEQUENCE,
    M.BUYER_CODE,
	 M.MO_NO, 
	 M.ORDER_REFERENCE_PO_NO,
	 M.ORDER_COLOR,
	 M.ITEM_COLOR_NAME,
    M.SCAN_DATE,
    M.ORDER_QTY,
    M.TOTAL_CHECKED,
    M.GOOD,
    M.DEFECT_BS,
    M.TRANSFER_QTY,
    M.ORDER_QTY-M.TOTAL_CHECKED BALANCE,
    M.GOOD-M.TRANSFER_QTY BAL_TRANSFER,
    M.ORDER_QTY - M.GOOD BAL_SCHEDULE,
    M.RETURN_STATUS,
    M.COUNT_SPLIT
FROM (
	SELECT a.SCH_ID,
		a.SCHD_ID,
		a.BUYER_CODE,
		a.SCAN_DATE,
		a.BARCODE_SERIAL,
		c.BUNDLE_SEQUENCE,
		a.ORDER_SIZE,
		a.MO_NO,
		h.ORDER_REFERENCE_PO_NO,
		h.ITEM_COLOR_NAME,
		a.ORDER_COLOR,
		a.ORDER_QTY, 
		a.TRANSFER_QTY,
		IFNULL(d.REPAIRED + d.RTT, 0) AS GOOD,
		IFNULL(d.TOTAL_CHECKED, 0) AS TOTAL_CHECKED,
		IFNULL(d.DEFECT + d.BS, 0) AS DEFECT_BS,
		f.RETURN_STATUS, 
		a.COUNT_SPLIT
	FROM (
		SELECT a.SCH_ID, a.SCHD_ID, DATE(a.SEWING_SCAN_TIME) SCAN_DATE, d.BUYER_CODE, d.ORDER_COLOR,
		 a.BARCODE_SERIAL, f.BARCODE_SERIAL BARCODE_TRANSFER, d.ORDER_SIZE, d.MO_NO, d.ORDER_QTY,	
		 CASE WHEN f.BARCODE_SERIAL THEN IFNULL(f.TRANSFER_QTY, d.ORDER_QTY) ELSE 0 END AS TRANSFER_QTY,
		 f.COUNT_SPLIT
		FROM scan_sewing_in a 
		LEFT JOIN weekly_prod_schedule b ON a.SCH_ID = b.SCH_ID
		LEFT JOIN item_siteline c ON b.SCH_ID_SITELINE = c.ID_SITELINE
		LEFT JOIN view_order_detail d ON d.BARCODE_SERIAL = a.BARCODE_SERIAL
		LEFT JOIN (
			SELECT  a.BARCODE_MAIN BARCODE_SERIAL, SUM(b.NEW_QTY) TRANSFER_QTY, COUNT(b.BARCODE_SERIAL) AS COUNT_SPLIT
			FROM scan_sewing_out a 
			LEFT JOIN scan_sewing_qr_split b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
			LEFT JOIN weekly_prod_schedule c ON a.SCH_ID = c.SCH_ID
			LEFT JOIN item_siteline d ON c.SCH_ID_SITELINE = d.ID_SITELINE
			WHERE a.SEWING_SCAN_LOCATION = :sitename AND d.SITE_NAME = :sitename AND c.SCH_SITE = :sitename AND d.LINE_NAME = :linename 
			GROUP BY a.BARCODE_MAIN
		) f ON f.BARCODE_SERIAL = a.BARCODE_SERIAL
		WHERE b.ENDLINE_VER = '1' -- disini menentukan versi
		AND a.SEWING_SCAN_LOCATION = :sitename 
		AND c.SITE_NAME = :sitename 
		AND c.LINE_NAME = :linename 
		AND b.SCH_SITE = :sitename 
		AND DATE(a.SEWING_SCAN_TIME) BETWEEN :startDate AND :endDate
	) a
	LEFT JOIN order_qr_generate c ON a.BARCODE_SERIAL = c.BARCODE_SERIAL
	LEFT JOIN (
					SELECT
					   a.ENDLINE_SCH_ID,
					   a.BARCODE_SERIAL,
					   a.ENDLINE_PLAN_SIZE,
					   SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS RTT,
					   SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'DEFECT' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS DEFECT,
					   SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'BS' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS BS,
					   SUM(CASE WHEN a.ENDLINE_OUT_TYPE = 'DEFECT' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR = 'Y' THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS REPAIRED,
					   SUM(CASE WHEN a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY ELSE 0 END) AS TOTAL_CHECKED
					FROM qc_endline_output a
					WHERE a.BARCODE_SERIAL IN (
						  SELECT 
							n.BARCODE_SERIAL
							FROM (
								SELECT  a.BARCODE_SERIAL, d.MO_NO, d.ORDER_QTY,	
								CASE WHEN f.BARCODE_SERIAL THEN IFNULL(f.TRANSFER_QTY, d.ORDER_QTY) ELSE 0 END AS TRANSFER_QTY
								FROM scan_sewing_in a 
								LEFT JOIN weekly_prod_schedule b ON a.SCH_ID = b.SCH_ID
								LEFT JOIN item_siteline c ON b.SCH_ID_SITELINE = c.ID_SITELINE
								LEFT JOIN view_order_detail d ON d.BARCODE_SERIAL = a.BARCODE_SERIAL
								LEFT JOIN (
									SELECT  a.BARCODE_MAIN BARCODE_SERIAL, SUM(b.NEW_QTY) TRANSFER_QTY
									FROM scan_sewing_out a 
									LEFT JOIN scan_sewing_qr_split b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
									LEFT JOIN weekly_prod_schedule c ON a.SCH_ID = c.SCH_ID
									LEFT JOIN item_siteline d ON c.SCH_ID_SITELINE = d.ID_SITELINE
									WHERE a.SEWING_SCAN_LOCATION = :sitename AND d.SITE_NAME = :sitename AND c.SCH_SITE = :sitename AND d.LINE_NAME = :linename 
									GROUP BY a.BARCODE_MAIN
								) f ON f.BARCODE_SERIAL = a.BARCODE_SERIAL
								WHERE a.SEWING_SCAN_LOCATION = :sitename AND c.SITE_NAME = :sitename AND b.SCH_SITE = :sitename AND c.LINE_NAME = :linename 
							) n WHERE n.ORDER_QTY <> n.TRANSFER_QTY
					) 
					GROUP BY a.ENDLINE_SCH_ID,
					   a.BARCODE_SERIAL,
					   a.ENDLINE_PLAN_SIZE
	) d ON d.BARCODE_SERIAL = a.BARCODE_SERIAL AND a.ORDER_SIZE = d.ENDLINE_PLAN_SIZE
	LEFT JOIN (
			  SELECT  a.BARCODE_SERIAL, COUNT(*) AS  RETURN_STATUS
			  FROM scan_sewing_return a 
			  WHERE a.CONFIRM_STATUS = '0' AND a.SEWING_SCAN_LOCATION = :sitename
			  GROUP BY a.BARCODE_SERIAL
	) f ON f.BARCODE_SERIAL = a.BARCODE_SERIAL
	LEFT JOIN order_po_listing h ON h.MO_NO = a.MO_NO
	WHERE a.ORDER_QTY <> a.TRANSFER_QTY AND a.SCAN_DATE <= :schDate
) M`;

export const QueryGetLogEndline = `-- LOG INPUT
SELECT n.* , c.QC_NAME
FROM ( 
	SELECT  
	a.BARCODE_SERIAL, a.ENDLINE_ACT_SCHD_ID, a.ENDLINE_SCH_ID,
	 a.ENDLINE_ID_SITELINE, a.ENDLINE_LINE_NAME, a.ENDLINE_SCHD_DATE, 
	'RFT' ENDLINE_OUT_TYPE, a.ENDLINE_OUT_UNDO,
	CASE 
		WHEN a.ENDLINE_PORD_TYPE = 'N' THEN 'Normal Time' 
		WHEN a.ENDLINE_PORD_TYPE = 'O' THEN 'Over Time'
		ELSE 'Extra Over Time' END AS ENDLINE_PORD_TYPE, 
	a.ENDLINE_PLAN_SIZE, 
	a.ENDLINE_OUT_QTY, a.ENDLINE_ADD_ID, TIME(a.ENDLINE_ADD_TIME) ADD_TIME 
	FROM qc_endline_output a 
	LEFT JOIN item_siteline b ON a.ENDLINE_ID_SITELINE = b.ID_SITELINE
	WHERE a.ENDLINE_SCHD_DATE = :schDate AND b.SITE_NAME = :sitename  AND b.LINE_NAME = :linename AND
	 a.ENDLINE_OUT_TYPE = 'RTT' 
	-- RTT n Repair
	UNION ALL
	SELECT 
		a.BARCODE_SERIAL, a.ENDLINE_ACT_RPR_SCHD_ID, a.ENDLINE_SCH_ID, 
		a.ENDLINE_ID_SITELINE, a.ENDLINE_LINE_NAME, date(a.ENDLINE_MOD_TIME) ENDLINE_SCHD_DATE, 
		'REPAIRED' ENDLINE_OUT_TYPE, 		a.ENDLINE_OUT_UNDO,		
		CASE 
		WHEN a.ENDLINE_PORD_TYPE = 'N' THEN 'Normal Time' 
		WHEN a.ENDLINE_PORD_TYPE = 'O' THEN 'Over Time'
		ELSE 'Extra Over Time' END AS ENDLINE_PORD_TYPE, 
		 a.ENDLINE_PLAN_SIZE, 
		a.ENDLINE_OUT_QTY, a.ENDLINE_ADD_ID, TIME(a.ENDLINE_MOD_TIME) ADD_TIME
	FROM qc_endline_output a 
	LEFT JOIN item_siteline b ON a.ENDLINE_ID_SITELINE = b.ID_SITELINE
	WHERE DATE(a.ENDLINE_MOD_TIME) = :schDate AND b.SITE_NAME = :sitename AND b.LINE_NAME = :linename AND
	a.ENDLINE_OUT_TYPE <> 'BS'  AND a.ENDLINE_REPAIR = 'Y'
	 AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL   
	UNION ALL
	SELECT 
	a.BARCODE_SERIAL, 	a.ENDLINE_ACT_SCHD_ID, a.ENDLINE_SCH_ID, 
	a.ENDLINE_ID_SITELINE, a.ENDLINE_LINE_NAME, a.ENDLINE_SCHD_DATE, 
	a.ENDLINE_OUT_TYPE, a.ENDLINE_OUT_UNDO,			
	CASE 
		WHEN a.ENDLINE_PORD_TYPE = 'N' THEN 'Normal Time' 
		WHEN a.ENDLINE_PORD_TYPE = 'O' THEN 'Over Time'
		ELSE 'Extra Over Time' END AS ENDLINE_PORD_TYPE,  a.ENDLINE_PLAN_SIZE, 
	a.ENDLINE_OUT_QTY, a.ENDLINE_ADD_ID, TIME(a.ENDLINE_ADD_TIME) ADD_TIME
	FROM qc_endline_output a 
	LEFT JOIN item_siteline b ON a.ENDLINE_ID_SITELINE = b.ID_SITELINE
	WHERE a.ENDLINE_SCHD_DATE = :schDate AND b.SITE_NAME = :sitename  AND b.LINE_NAME = :linename AND
	a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y'
) n 
LEFT JOIN qc_inspection_user c ON c.QC_USER_ID = n.ENDLINE_ADD_ID
ORDER  BY n.ADD_TIME`;

export const QueryQcEndlineDailyNew = `SELECT *,ROUND(n.PLAN_MP*n.PLAN_WH/n.PLAN_SEW_SMV) PLAN_TARGET,
ROUND(n.PLAN_MP_OT*n.PLAN_WH_OT/n.PLAN_SEW_SMV) PLAN_TARGET_OT,
ROUND(n.PLAN_MP_X_OT*n.PLAN_WH_X_OT/n.PLAN_SEW_SMV) PLAN_TARGET_X_OT,
ROUND(n.ACT_MP*n.PLAN_WH/n.PLAN_SEW_SMV) ACT_TARGET,
ROUND(n.ACT_MP_OT*n.PLAN_WH_OT/n.PLAN_SEW_SMV) ACT_TARGET_OT,
ROUND(n.ACT_MP_X_OT*n.PLAN_WH_X_OT/n.PLAN_SEW_SMV) ACT_TARGET_X_OT
FROM (
	SELECT a.SCHD_ID, a.SCH_ID, a.SCHD_PROD_DATE, e.ID_SITELINE,  d.SITE_NAME, d.LINE_NAME, e.SHIFT,
	b.ORDER_REFERENCE_PO_NO,
	a.SCHD_CAPACITY_ID, a.SCHD_DAYS_NUMBER, a.SCHD_QTY, b.ORDER_NO, b.CUSTOMER_NAME, b.CUSTOMER_PROGRAM, b.PRODUCT_ITEM_CODE, 
	b.ITEM_COLOR_CODE, b.ITEM_COLOR_NAME, b.PRODUCT_ITEM_DESCRIPTION,  b.ORDER_STYLE_DESCRIPTION,
	CASE WHEN ISNULL(c.ACTUAL_SEW_SMV) THEN c.PLAN_SEW_SMV ELSE c.ACTUAL_SEW_SMV END PLAN_SEW_SMV,
	CASE WHEN ISNULL(m.PLAN_MP) THEN e.PLAN_MP ELSE m.PLAN_MP END PLAN_MP, 
	CASE WHEN ISNULL(f.PLAN_WH) THEN e.PLAN_WH ELSE f.PLAN_WH END PLAN_WH, 
	m.ACT_MP, m.PLAN_MP_OT, m.ACT_MP_OT, m.ACT_MP_X_OT, f.PLAN_WH_OT, m.PLAN_MP_X_OT, f.PLAN_WH_X_OT, 
	o.PLAN_REMARK, p.NORMAL_OUTPUT, p.OT_OUTPUT, p.X_OT_OUTPUT,	XN.NORMAL_REMARK, XN.OT_REMARK, XN.OT_X_REMARK
	FROM weekly_prod_sch_detail a
	LEFT JOIN viewcapacity b ON a.SCHD_CAPACITY_ID = b.ID_CAPACITY 
	LEFT JOIN item_smv_header c ON c.ORDER_NO = b.ORDER_NO
		-- untuk aktual SMV
	LEFT JOIN smv_daily_plan g ON g.SCHD_ID = a.SCHD_ID AND g.SHIFT = :shift
	LEFT JOIN item_siteline d ON a.SCHD_ID_SITELINE = d.ID_SITELINE
	LEFT JOIN 	(
	-- Manpower_detail di join dengan item siteline untunk mendapatkan line name dan shift
		SELECT a.ID_MPD, a.MP_DATE, a.ID_SITELINE, b.SITE_NAME, b.LINE_NAME, b.SHIFT, a.PLAN_WH, a.PLAN_MP, a.ACT_WH, a.ACT_MP, a.OT_WH, a.OT_MP
		FROM manpower_detail a 
		LEFT JOIN item_siteline b ON a.ID_SITELINE = b.ID_SITELINE
		WHERE a.MP_DATE = :plannDate  AND b.SITE_NAME = :sitename AND b.SHIFT = :shift AND b.ID_SITELINE = :idstieline
		ORDER by a.ID_SITELINE
	) e ON e.LINE_NAME = d.LINE_NAME
-- untuk working hour dan mp_daily_detail dipakaikan kolom shift untuk mengambil data jika line mempunyai shifting
	LEFT JOIN workinghour_detail f ON f.SCHD_ID = a.SCHD_ID AND f.SHIFT = :shift
	LEFT JOIN mp_daily_detail m ON m.SCHD_ID = a.SCHD_ID AND m.SHIFT = :shift
	LEFT JOIN remark_detail o ON o.SCHD_ID = a.SCHD_ID AND o.SHIFT = :shift
	LEFT JOIN (
			SELECT 
			    a.ENDLINE_ACT_SCHD_ID, 
			    a.ENDLINE_SCHD_DATE,  
			    a.ENDLINE_SCH_ID, 
			    a.ENDLINE_ID_SITELINE, 
			    a.ENDLINE_LINE_NAME,
			    SUM(CASE 
			        WHEN a.ENDLINE_PORD_TYPE = 'N' AND a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY
			        WHEN a.ENDLINE_PORD_TYPE = 'N' AND a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL THEN a.ENDLINE_OUT_QTY
			        WHEN a.ENDLINE_PORD_TYPE = 'O' AND a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY
			        WHEN a.ENDLINE_PORD_TYPE = 'O' AND a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL THEN a.ENDLINE_OUT_QTY
			        WHEN a.ENDLINE_PORD_TYPE = 'XO' AND a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN a.ENDLINE_OUT_QTY
			        WHEN a.ENDLINE_PORD_TYPE = 'XO' AND a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL THEN a.ENDLINE_OUT_QTY
			        ELSE 0
			    END) AS NORMAL_OUTPUT,
			    SUM(CASE 
			        WHEN a.ENDLINE_PORD_TYPE = 'N' AND a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'N' AND a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'O' AND a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'O' AND a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'XO' AND a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'XO' AND a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL THEN 0
			        ELSE a.ENDLINE_OUT_QTY
			    END) AS OT_OUTPUT,
			    SUM(CASE 
			        WHEN a.ENDLINE_PORD_TYPE = 'N' AND a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'N' AND a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'O' AND a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'O' AND a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'XO' AND a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL THEN 0
			        WHEN a.ENDLINE_PORD_TYPE = 'XO' AND a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL THEN 0
			        ELSE a.ENDLINE_OUT_QTY
			    END) AS X_OT_OUTPUT
			FROM qc_endline_output a
			WHERE 
			    (a.ENDLINE_SCHD_DATE = :plannDate) AND 
			    (a.ENDLINE_ID_SITELINE = :idstieline) AND 
			    (a.ENDLINE_PORD_TYPE IN ('N', 'O', 'XO')) AND
			    ((a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL) OR 
			    (a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL))
			GROUP BY  
			    a.ENDLINE_ACT_SCHD_ID
	) p ON a.SCHD_ID = p.ENDLINE_ACT_SCHD_ID AND p.ENDLINE_ID_SITELINE = :idstieline
	LEFT JOIN (
			SELECT xc.SCHD_ID, xc.ID_SITELINE, 
		       MAX(CASE WHEN xc.TYPE_PROD = 'N' THEN xc.REMARK END) AS NORMAL_REMARK,
		       MAX(CASE WHEN xc.TYPE_PROD = 'O' THEN xc.REMARK END) AS OT_REMARK,
		       MAX(CASE WHEN xc.TYPE_PROD = 'XO' THEN xc.REMARK END) AS OT_X_REMARK
			FROM (
			    SELECT a.SCHD_ID, a.ID_SITELINE, a.TYPE_PROD, a.REMARK
			    FROM qc_endline_remark a 
			    WHERE a.PROD_DATE = :plannDate AND a.ID_SITELINE = :idstieline
			) xc
			GROUP BY xc.SCHD_ID, xc.ID_SITELINE
	) XN ON XN.SCHD_ID = a.SCHD_ID 
	WHERE a.ENDLINE_VER = '1' AND a.SCHD_PROD_DATE = :plannDate   AND e.MP_DATE = :plannDate  AND d.SITE_NAME = :sitename AND d.LINE_NAME = :linename
)n`;
