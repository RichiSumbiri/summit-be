export const QueryGetOrderRepMo = `-- query order status by po 
SELECT 
	FA.PRODUCTION_MONTH, FA.PROD_MONTH, FA.MANUFACTURING_SITE, FA.CUSTOMER_NAME,FA.CUSTOMER_DIVISION, FA.CUSTOMER_PROGRAM,
	FA.CUSTOMER_SEASON, FA.ORDER_NO, FA.ORDER_REFERENCE_PO_NO, FA.PRODUCT_ITEM_CODE, FA.PRODUCT_ITEM_DESCRIPTION, FA.ORDER_STYLE_DESCRIPTION,
	FA.ITEM_COLOR_CODE, FA.ITEM_COLOR_NAME, FA.MO_NO, FA.TARGET_PCD, FA.PLAN_EXFACTORY_DATE, FA.FINAL_DELIVERY_DATE,
	FA.NEW_TARGET_PCD, FA.NEW_PLAN_EXFACTORY_DATE,  FA.NEW_FINAL_DELIVERY_DATE, 
	FA.ORDER_QTY,
	FA.MO_QTY, 
	IFNULL(FA.SCH_QTY, 0) SCH_QTY,
	IFNULL(FB.QR_QTY, 0) CUTTING_OUTPUT_QTY,
	IFNULL(FB.CUTTING_OUTPUT_QTY, 0) QR_GENERATE,
	IFNULL(FB.SEWING_IN, 0) SEWING_IN,
    IFNULL((FB.SEWING_IN-FB.SEWING_OUT), 0) SEWING_WIP,
	IFNULL(FB.SEWING_OUT, 0) SEWING_OUT,
	IFNULL(FB.PACKING_IN, 0) PACKING_IN,
	 IFNULL(FA.VAR_SCHEDULE_QTY, 0) VAR_SCHEDULE_QTY,
	 IFNULL((FA.ORDER_QTY-FB.QR_QTY), 0) VAR_ORDER_CUTTING,
	 IFNULL((FA.ORDER_QTY-FB.SEWING_OUT), 0) VAR_ORDER_SEWING,
	 IFNULL((FA.ORDER_QTY-FB.PACKING_IN), 0) VAR_ORDER_PACKING,
	 ROUND((IFNULL(FA.SCH_QTY / FA.ORDER_QTY, 0) * 100), 2) AS TTL_SCHEDULE_PERCENTAGE,
	 ROUND((IFNULL(FB.QR_QTY / FA.ORDER_QTY, 0)* 100), 2)  AS TTL_CUTTING_PERCENTAGE,
	 ROUND((IFNULL(FB.SEWING_OUT / FA.ORDER_QTY, 0) * 100), 2)  AS TTL_SEWING_PERCENTAGE,       
	 ROUND((IFNULL(FB.PACKING_IN / FA.ORDER_QTY, 0) * 100), 2)  AS TTL_PACKING_PERCENTAGE,
	 IF(IFNULL(FA.SCH_QTY / FA.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS SCHEDULE_STATUS,
	 IF(IFNULL(FB.QR_QTY / FA.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS CUTTING_STATUS,
	 IF(IFNULL(FB.SEWING_OUT / FA.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS SEWING_STATUS,
	 IF(IFNULL(FB.PACKING_IN / FA.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS PACKING_STATUS
FROM ( 
	SELECT a.PRODUCTION_MONTH, a.PROD_MONTH, a.MANUFACTURING_SITE, a.CUSTOMER_NAME,a.CUSTOMER_DIVISION, a.CUSTOMER_PROGRAM,
	a.CUSTOMER_SEASON, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO, a.PRODUCT_ITEM_CODE, a.PRODUCT_ITEM_DESCRIPTION, a.ORDER_STYLE_DESCRIPTION,
	a.ITEM_COLOR_CODE, a.ITEM_COLOR_NAME, a.MO_NO, a.TARGET_PCD, a.PLAN_EXFACTORY_DATE, a.FINAL_DELIVERY_DATE,
	a.NEW_TARGET_PCD, a.NEW_PLAN_EXFACTORY_DATE,  a.NEW_FINAL_DELIVERY_DATE, 
	SUM(a.MO_QTY) MO_QTY, SUM(a.ORDER_QTY) ORDER_QTY, SUM(n.SCH_QTY) SCH_QTY, 
	(SUM(a.ORDER_QTY)-SUM(n.SCH_QTY)) VAR_SCHEDULE_QTY
	FROM viewcapacity a 
	LEFT JOIN (
		SELECT a.SCH_CAPACITY_ID, SUM(a.SCH_QTY) SCH_QTY
		FROM weekly_prod_schedule a  
		WHERE a.SCH_CAPACITY_ID IN (
				SELECT SCH_CAPACITY_ID FROM viewcapacity WHERE PRODUCTION_MONTH IN (:listMonth)
			)
		GROUP BY a.SCH_CAPACITY_ID
		) n ON a.ID_CAPACITY = n.SCH_CAPACITY_ID
	WHERE a.PRODUCTION_MONTH IN (:listMonth)
	GROUP BY  a.PRODUCTION_MONTH, a.MANUFACTURING_SITE, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO, a.ITEM_COLOR_CODE
	ORDER BY a.PRODUCTION_MONTH, a.MANUFACTURING_SITE, a.CUSTOMER_NAME, a.CUSTOMER_DIVISION, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO, a.ITEM_COLOR_CODE
) FA 
LEFT JOIN (
	SELECT A.PRODUCTION_MONTH, A.MANUFACTURING_SITE, A.CUSTOMER_NAME,
	A.ORDER_NO, A.ORDER_REFERENCE_PO_NO, A.MO_NO,  A.PLAN_EXFACTORY_DATE, A.ITEM_COLOR_CODE,  
    SUM(A.ORDER_QTY) ORDER_QTY, 
    SUM(B.QR_QTY) AS QR_QTY,
    SUM(B.CUT_GENERATE) AS CUTTING_OUTPUT_QTY,
    SUM(B.LOADING_QTY) AS SEWING_IN,
    SUM(B.SEWING_OUT) AS SEWING_OUT,
    SUM(B.PACKING_IN) AS PACKING_IN
	FROM (
		SELECT a.PRODUCTION_MONTH, IFNULL(a.NEW_MANUFACTURING_SITE,a.MANUFACTURING_SITE) MANUFACTURING_SITE, a.CUSTOMER_NAME, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO, 
		a.MO_NO,  a.PLAN_EXFACTORY_DATE, a.ITEM_COLOR_CODE, SUM(a.ORDER_QTY) ORDER_QTY
		FROM order_po_listing a 
		WHERE a.PRODUCTION_MONTH IN (:listMonth)
		GROUP BY a.MO_NO
	) A 
	LEFT JOIN (
       -- atas
       		-- gruoping tracking 
			SELECT 
				n.MO_NO, n.ORDER_COLOR,  n.ORDER_SIZE, 
				SUM(n.QR_QTY) QR_QTY,  SUM(CUT_GENERATE) CUT_GENERATE, SUM(n.LOADING_QTY) LOADING_QTY, SUM(n.SEWING_OUT) SEWING_OUT, SUM(n.PACKING_IN) PACKING_IN
			FROM (
					SELECT a.MO_NO,  a.ORDER_COLOR, a.ORDER_SIZE,
					SUM(a.ORDER_QTY) QR_QTY,  0 CUT_GENERATE, 0 LOADING_QTY, 0 SEWING_OUT, 0 PACKING_IN
					FROM view_order_detail a 
					WHERE a.MO_NO IN (
							SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
							WHERE a.PRODUCTION_MONTH IN (:listMonth)
							GROUP BY a.MO_NO
					)
					GROUP BY a.MO_NO, a.ORDER_COLOR
					UNION ALL 
						-- GENERATE
					SELECT b.MO_NO,  b.ORDER_COLOR, b.ORDER_SIZE,
					0 QR_QTY, SUM(b.ORDER_QTY) CUT_GENERATE, 0 LOADING_QTY, 0 SEWING_OUT, 0 PACKING_IN
					FROM order_qr_generate a 
					LEFT JOIN view_order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
					WHERE b.MO_NO IN (
							SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
							WHERE a.PRODUCTION_MONTH IN (:listMonth)
							GROUP BY a.MO_NO
					) GROUP BY b.MO_NO,  b.ORDER_COLOR
					UNION ALL
					-- SEWING IN
					SELECT b.MO_NO,  b.ORDER_COLOR, b.ORDER_SIZE,
					0 QR_QTY,  0 CUT_GENERATE, SUM(b.ORDER_QTY) LOADING_QTY, 0 SEWING_OUT, 0 PACKING_IN
					FROM scan_sewing_in a 
					LEFT JOIN view_order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
					WHERE b.MO_NO IN (
							SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
							WHERE a.PRODUCTION_MONTH IN (:listMonth)
							GROUP BY a.MO_NO
					) GROUP BY b.MO_NO,  b.ORDER_COLOR
					UNION ALL
					-- SEWING OUT
					SELECT a.MO_NO, a.ORDER_COLOR,  a.ORDER_SIZE,
					0 QR_QTY,  0 CUT_GENERATE, 0 LOADING_QTY, SUM(a.ORDER_QTY) SEWING_OUT, 0 PACKING_IN
					FROM (
					  SELECT DISTINCT  b.MO_NO, b.ORDER_COLOR,  b.ORDER_SIZE, a.SCH_ID, 
					  a.BARCODE_MAIN AS BARCODE_SERIAL,
					  CASE WHEN  c.BARCODE_SERIAL IS NOT NULL THEN SUM(c.NEW_QTY) ELSE b.ORDER_QTY END AS ORDER_QTY
					  FROM scan_sewing_out a 
					  LEFT JOIN view_order_detail b ON a.BARCODE_MAIN = b.BARCODE_SERIAL
					  LEFT JOIN scan_sewing_qr_split c ON c.BARCODE_SERIAL = a.BARCODE_SERIAL
					  WHERE  b.MO_NO IN  (
						  SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
							WHERE a.PRODUCTION_MONTH IN (:listMonth) 
							GROUP BY a.MO_NO
					  ) 
					  GROUP BY a.SCH_ID, b.ORDER_SIZE, a.BARCODE_MAIN
					) a GROUP BY a.MO_NO,  a.ORDER_COLOR
					UNION ALL 
					-- packing in
					SELECT a.MO_NO, a.ORDER_COLOR,  a.ORDER_SIZE,
					0 QR_QTY,  0 CUT_GENERATE, 0 LOADING_QTY, 0 SEWING_OUT, SUM(a.ORDER_QTY) PACKING_IN
					FROM (
					SELECT DISTINCT  b.MO_NO, b.ORDER_COLOR,  b.ORDER_SIZE, a.SCH_ID, 
					a.BARCODE_MAIN AS BARCODE_SERIAL,
					CASE WHEN  c.BARCODE_SERIAL IS NOT NULL THEN SUM(c.NEW_QTY) ELSE b.ORDER_QTY END AS ORDER_QTY
					FROM scan_packing_in a 
					LEFT JOIN view_order_detail b ON a.BARCODE_MAIN = b.BARCODE_SERIAL
					LEFT JOIN scan_sewing_qr_split c ON c.BARCODE_SERIAL = a.BARCODE_SERIAL
					WHERE  b.MO_NO IN  (
						SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
							WHERE a.PRODUCTION_MONTH IN (:listMonth) 
							GROUP BY a.MO_NO
					) 
					GROUP BY a.SCH_ID, b.ORDER_SIZE, a.BARCODE_MAIN
					) a GROUP BY a.MO_NO,  a.ORDER_COLOR
				) n 
			GROUP BY n.MO_NO, n.ORDER_COLOR
       -- bawah
    ) B ON A.MO_NO = B.MO_NO
    GROUP BY A.PRODUCTION_MONTH, A.MANUFACTURING_SITE, A.CUSTOMER_NAME,
    A.ORDER_NO, A.ORDER_REFERENCE_PO_NO, A.ITEM_COLOR_CODE
) FB ON FA.PRODUCTION_MONTH = FB.PRODUCTION_MONTH 
	 AND FA.MANUFACTURING_SITE = FB.MANUFACTURING_SITE
	 AND FA.ORDER_NO = FB.ORDER_NO
	 AND FA.ORDER_REFERENCE_PO_NO = FB.ORDER_REFERENCE_PO_NO
	 AND FA.ITEM_COLOR_CODE = FB.ITEM_COLOR_CODE`;

export const QueryGetOrderStatSize = `SELECT 
FA.PRODUCTION_MONTH, FA.PROD_MONTH, FA.MANUFACTURING_SITE, FA.CUSTOMER_NAME,FA.CUSTOMER_DIVISION, FA.CUSTOMER_PROGRAM,
FA.CUSTOMER_SEASON, FA.ORDER_NO, FA.ORDER_REFERENCE_PO_NO, FA.PRODUCT_ITEM_CODE, FA.PRODUCT_ITEM_DESCRIPTION, FA.ORDER_STYLE_DESCRIPTION,
FA.ITEM_COLOR_CODE, FB.SIZE_CODE,  	FB.ORDER_QTY,	FB.MO_QTY, 
IFNULL(FA.SCH_QTY, 0) SCH_QTY,
IFNULL(FB.QR_QTY, 0) CUTTING_OUTPUT_QTY,
IFNULL(FB.CUTTING_OUTPUT_QTY, 0) QR_GENERATE,
IFNULL(FB.SEWING_IN, 0) SEWING_IN,
IFNULL((FB.SEWING_IN-FB.SEWING_OUT), 0) SEWING_WIP,
IFNULL(FB.SEWING_OUT, 0) SEWING_OUT,
IFNULL(FB.PACKING_IN, 0) PACKING_IN,
IFNULL(FB.ORDER_QTY-FA.SCH_QTY, 0) VAR_SCHEDULE_QTY,
IFNULL((FB.ORDER_QTY-FB.QR_QTY), 0) VAR_ORDER_CUTTING,
IFNULL((FB.ORDER_QTY-FB.SEWING_OUT), 0) VAR_ORDER_SEWING,
IFNULL((FB.ORDER_QTY-FB.PACKING_IN), 0) VAR_ORDER_PACKING,
ROUND((IFNULL(FA.SCH_QTY / FB.ORDER_QTY, 0) * 100), 2) AS TTL_SCHEDULE_PERCENTAGE,
ROUND((IFNULL(FB.QR_QTY / FB.ORDER_QTY, 0) * 100), 2) AS TTL_CUTTING_PERCENTAGE,
ROUND((IFNULL(FB.SEWING_OUT / FB.ORDER_QTY, 0) * 100), 2) AS TTL_SEWING_PERCENTAGE,
ROUND((IFNULL(FB.PACKING_IN / FB.ORDER_QTY, 0) * 100), 2) AS TTL_PACKING_PERCENTAGE,
IF(IFNULL(FA.SCH_QTY / FB.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS SCHEDULE_STATUS,
IF(IFNULL(FB.QR_QTY / FB.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS CUTTING_STATUS,
IF(IFNULL(FB.SEWING_OUT / FB.ORDER_QTY, 0)* 100 >= 100, 'Complete', 'Open') AS SEWING_STATUS,
IF(IFNULL(FB.PACKING_IN / FB.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS PACKING_STATUS
FROM ( 
    SELECT a.PRODUCTION_MONTH, a.PROD_MONTH, a.MANUFACTURING_SITE, a.CUSTOMER_NAME,a.CUSTOMER_DIVISION, a.CUSTOMER_PROGRAM,
    a.CUSTOMER_SEASON, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO, a.PRODUCT_ITEM_CODE, a.PRODUCT_ITEM_DESCRIPTION, a.ORDER_STYLE_DESCRIPTION,
    a.ITEM_COLOR_CODE, a.ITEM_COLOR_NAME, a.MO_NO, n.SIZE_CODE,
    n.SCH_QTY
    FROM viewcapacity a 
    LEFT JOIN (
        SELECT a.ID_CAPACITY, a.SIZE_CODE,   SUM(a.SCH_SIZE_QTY) SCH_QTY
        FROM weekly_sch_size a  
        WHERE a.ID_CAPACITY IN (
                SELECT ID_CAPACITY FROM viewcapacity WHERE 
					 PRODUCTION_MONTH = :prodMonth AND
       			 MANUFACTURING_SITE = :site AND
        			 ORDER_REFERENCE_PO_NO = :po AND 
					 ITEM_COLOR_CODE = :colors
            )
        GROUP BY a.ID_CAPACITY, a.SIZE_CODE
        ) n ON a.ID_CAPACITY = n.ID_CAPACITY
    WHERE a.PRODUCTION_MONTH = :prodMonth AND
        a.MANUFACTURING_SITE = :site AND
        a.ORDER_REFERENCE_PO_NO = :po AND 
        a.ITEM_COLOR_CODE = :colors
 --   GROUP BY  a.PRODUCTION_MONTH, a.MANUFACTURING_SITE, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO, a.PRODUCT_ITEM_CODE, n.SIZE_CODE
    ORDER BY a.PRODUCTION_MONTH, a.MANUFACTURING_SITE, a.CUSTOMER_NAME, a.CUSTOMER_DIVISION, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO, a.ITEM_COLOR_CODE, n.SIZE_CODE
) FA 
LEFT JOIN (
    -- DETAIL PER SIZE
	SELECT A.PRODUCTION_MONTH, A.MANUFACTURING_SITE, A.CUSTOMER_NAME,
	    A.ORDER_NO, A.ORDER_REFERENCE_PO_NO, A.MO_NO,  A.PLAN_EXFACTORY_DATE, A.ITEM_COLOR_CODE, A.SIZE_CODE, 
	    SUM(A.ORDER_QTY) ORDER_QTY, 
	    SUM(A.MO_QTY) MO_QTY, 
	    SUM(B.QR_QTY) AS QR_QTY,
	    SUM(B.CUT_GENERATE) AS CUTTING_OUTPUT_QTY,
	    SUM(B.LOADING_QTY) AS SEWING_IN,
	    SUM(B.SEWING_OUT) AS SEWING_OUT,
	    SUM(B.PACKING_IN) AS PACKING_IN
	FROM (
	    SELECT a.PRODUCTION_MONTH, a.MANUFACTURING_SITE, a.CUSTOMER_NAME, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO, 
	    a.MO_NO, a.SIZE_CODE,  a.PLAN_EXFACTORY_DATE, a.ITEM_COLOR_CODE, 
		 SUM(a.ORDER_QTY) ORDER_QTY, SUM(a.MO_QTY) MO_QTY
	    FROM order_po_listing_size a 
	    WHERE a.PRODUCTION_MONTH = :prodMonth AND
	        a.MANUFACTURING_SITE = :site AND
	        a.ORDER_REFERENCE_PO_NO = :po AND
	        a.ITEM_COLOR_CODE = :colors
	    GROUP BY a.MO_NO, a.ITEM_COLOR_CODE,  a.SIZE_CODE
	    ) A 
	    LEFT JOIN (
	    		-- batas atas
			-- gruoping tracking 
				SELECT 
					n.MO_NO, n.ORDER_COLOR,  n.ORDER_SIZE, 
					SUM(n.QR_QTY) QR_QTY,  SUM(CUT_GENERATE) CUT_GENERATE, SUM(n.LOADING_QTY) LOADING_QTY, SUM(n.SEWING_OUT) SEWING_OUT, SUM(n.PACKING_IN) PACKING_IN
				FROM (
						SELECT a.MO_NO,  a.ORDER_COLOR, a.ORDER_SIZE,
						SUM(a.ORDER_QTY) QR_QTY,  0 CUT_GENERATE, 0 LOADING_QTY, 0 SEWING_OUT, 0 PACKING_IN
						FROM view_order_detail a 
						WHERE a.MO_NO IN (
								SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
								WHERE a.PRODUCTION_MONTH = :prodMonth AND
								  a.MANUFACTURING_SITE = :site AND
								  a.ORDER_REFERENCE_PO_NO = :po AND
	        					  a.ITEM_COLOR_CODE = :colors
								GROUP BY a.MO_NO
						)
						GROUP BY a.MO_NO, a.ORDER_COLOR, a.ORDER_COLOR, a.ORDER_SIZE
						UNION ALL 
							-- GENERATE
						SELECT b.MO_NO,  b.ORDER_COLOR, b.ORDER_SIZE,
						0 QR_QTY, SUM(b.ORDER_QTY) CUT_GENERATE, 0 LOADING_QTY, 0 SEWING_OUT, 0 PACKING_IN
						FROM order_qr_generate a 
						LEFT JOIN view_order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
						WHERE b.MO_NO IN (
								SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
								WHERE a.PRODUCTION_MONTH = :prodMonth AND
								  a.MANUFACTURING_SITE = :site AND
								  a.ORDER_REFERENCE_PO_NO = :po AND
	        					  a.ITEM_COLOR_CODE = :colors
								GROUP BY a.MO_NO
						) GROUP BY b.MO_NO,  b.ORDER_COLOR, b.ORDER_SIZE
						UNION ALL
						-- SEWING IN
						SELECT b.MO_NO,  b.ORDER_COLOR, b.ORDER_SIZE,
						0 QR_QTY,  0 CUT_GENERATE, SUM(b.ORDER_QTY) LOADING_QTY, 0 SEWING_OUT, 0 PACKING_IN
						FROM scan_sewing_in a 
						LEFT JOIN view_order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
						WHERE b.MO_NO IN (
								SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
								WHERE a.PRODUCTION_MONTH = :prodMonth AND
								  a.MANUFACTURING_SITE = :site AND
								  a.ORDER_REFERENCE_PO_NO = :po AND
	        					  a.ITEM_COLOR_CODE = :colors
								GROUP BY a.MO_NO
						) GROUP BY b.MO_NO,  b.ORDER_COLOR, b.ORDER_SIZE
						UNION ALL
						-- SEWING OUT
						SELECT a.MO_NO, a.ORDER_COLOR,  a.ORDER_SIZE,
						0 QR_QTY,  0 CUT_GENERATE, 0 LOADING_QTY, SUM(a.ORDER_QTY) SEWING_OUT, 0 PACKING_IN
						FROM (
							SELECT DISTINCT  b.MO_NO, b.ORDER_COLOR,  b.ORDER_SIZE, a.SCH_ID, 
							a.BARCODE_MAIN AS BARCODE_SERIAL,
							CASE WHEN  c.BARCODE_SERIAL IS NOT NULL THEN SUM(c.NEW_QTY) ELSE b.ORDER_QTY END AS ORDER_QTY
							FROM scan_sewing_out a 
							LEFT JOIN view_order_detail b ON a.BARCODE_MAIN = b.BARCODE_SERIAL
							LEFT JOIN scan_sewing_qr_split c ON c.BARCODE_SERIAL = a.BARCODE_SERIAL
							WHERE  b.MO_NO IN  (
								SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
								WHERE a.PRODUCTION_MONTH = :prodMonth AND
								  a.MANUFACTURING_SITE = :site AND
								  a.ORDER_REFERENCE_PO_NO = :po AND
	        					  a.ITEM_COLOR_CODE = :colors
								GROUP BY a.MO_NO
							) 
							GROUP BY a.SCH_ID, b.ORDER_SIZE, a.BARCODE_MAIN
						) a GROUP BY a.MO_NO,  a.ORDER_COLOR, a.ORDER_SIZE
						UNION ALL 
						-- packing in
						SELECT a.MO_NO, a.ORDER_COLOR,  a.ORDER_SIZE,
						0 QR_QTY,  0 CUT_GENERATE, 0 LOADING_QTY, 0 SEWING_OUT,  SUM(a.ORDER_QTY) PACKING_IN
						FROM (
						  SELECT DISTINCT  b.MO_NO, b.ORDER_COLOR,  b.ORDER_SIZE, a.SCH_ID, 
						  a.BARCODE_MAIN AS BARCODE_SERIAL,
						  CASE WHEN  c.BARCODE_SERIAL IS NOT NULL THEN SUM(c.NEW_QTY) ELSE b.ORDER_QTY END AS ORDER_QTY
						  FROM scan_packing_in a 
						  LEFT JOIN view_order_detail b ON a.BARCODE_MAIN = b.BARCODE_SERIAL
						  LEFT JOIN scan_sewing_qr_split c ON c.BARCODE_SERIAL = a.BARCODE_SERIAL
						  WHERE  b.MO_NO IN  (
								SELECT DISTINCT a.MO_NO FROM order_po_listing_size a 
								WHERE a.PRODUCTION_MONTH = :prodMonth AND
								a.MANUFACTURING_SITE = :site AND
								a.ORDER_REFERENCE_PO_NO = :po AND
								a.ITEM_COLOR_CODE = :colors
								GROUP BY a.MO_NO
						  ) 
						  GROUP BY a.SCH_ID, b.ORDER_SIZE, a.BARCODE_MAIN
						) a GROUP BY a.MO_NO,  a.ORDER_COLOR, a.ORDER_SIZE
					) n 
				GROUP BY n.MO_NO, n.ORDER_COLOR,  n.ORDER_SIZE
	      	-- batas bawah 
    ) B ON A.MO_NO = B.MO_NO AND B.ORDER_COLOR = A.ITEM_COLOR_CODE AND A.SIZE_CODE = B.ORDER_SIZE
    GROUP BY A.PRODUCTION_MONTH, A.MANUFACTURING_SITE, A.CUSTOMER_NAME,
    A.ORDER_NO, A.ORDER_REFERENCE_PO_NO, A.ITEM_COLOR_CODE,  A.SIZE_CODE
) FB ON FA.PRODUCTION_MONTH = FB.PRODUCTION_MONTH 
 AND FA.MANUFACTURING_SITE = FB.MANUFACTURING_SITE
 AND FA.ORDER_NO = FB.ORDER_NO
 AND FA.ORDER_REFERENCE_PO_NO = FB.ORDER_REFERENCE_PO_NO
 AND FA.ITEM_COLOR_CODE = FB.ITEM_COLOR_CODE
 AND FA.SIZE_CODE = FB.SIZE_CODE
`;

export const QryGetOrderByCapacity = `SELECT 
FA.ID_CAPACITY, FA.PRODUCTION_MONTH, FA.PROD_MONTH, FA.ACTUAL_PROD_MONTH, FA.MANUFACTURING_SITE, FA.CUSTOMER_NAME,FA.CUSTOMER_DIVISION, FA.CUSTOMER_PROGRAM,
FA.CUSTOMER_SEASON, FA.ORDER_NO, FA.ORDER_REFERENCE_PO_NO, FA.PRODUCT_ITEM_CODE, FA.PRODUCT_ITEM_DESCRIPTION, FA.ORDER_STYLE_DESCRIPTION,
FA.ITEM_COLOR_CODE, FA.ITEM_COLOR_NAME, FA.MO_NO, FA.TARGET_PCD, FA.PLAN_EXFACTORY_DATE, FA.FINAL_DELIVERY_DATE,
FA.NEW_TARGET_PCD,   FA.NEW_FINAL_DELIVERY_DATE, 
FA.MO_QTY, FA.ORDER_QTY, FA.SCH_QTY, FA.VAR_SCHEDULE_QTY,
FB.TTL_SEWING_IN TTL_SEWING_IN,
FB.TTL_QC_QTY TTL_QC_QTY,
FB.TTL_SEWING_OUT TTL_SEWING_OUT,
FB.TTL_PACKING_IN TTL_PACKING_IN,
IFNULL(FA.ORDER_QTY-FA.SCH_QTY, 0) VAR_SCHEDULE_QTY,
IFNULL((FA.ORDER_QTY-FB.TTL_SEWING_IN), 0) VAR_LOADING,
IFNULL((FA.ORDER_QTY-FB.TTL_QC_QTY), 0) VAR_QC,
IFNULL((FA.ORDER_QTY-FB.TTL_SEWING_OUT), 0) VAR_ORDER_SEWING,
IFNULL((FA.ORDER_QTY-FB.TTL_PACKING_IN), 0) VAR_ORDER_PACKING,
ROUND((IFNULL(FA.SCH_QTY / FA.ORDER_QTY, 0) * 100), 2) AS TTL_SCHEDULE_PERCENTAGE,
ROUND((IFNULL(FB.TTL_SEWING_IN / FA.ORDER_QTY, 0) * 100), 2) AS TTL_LOADING_PERCENTAGE,
ROUND((IFNULL(FB.TTL_QC_QTY / FA.ORDER_QTY, 0) * 100), 2) AS TTL_QC_PERCENTAGE,
ROUND((IFNULL(FB.TTL_SEWING_OUT / FA.ORDER_QTY, 0) * 100), 2) AS TTL_SEWING_PERCENTAGE,
ROUND((IFNULL(FB.TTL_PACKING_IN / FA.ORDER_QTY, 0) * 100), 2) AS TTL_PACKING_PERCENTAGE,
IF(IFNULL(FA.SCH_QTY / FA.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS SCHEDULE_STATUS,
IF(IFNULL(FB.TTL_SEWING_IN / FA.ORDER_QTY, 0)  * 100 >= 100, 'Complete', 'Open') AS LOADING_STATUS,
IF(IFNULL(FB.TTL_QC_QTY / FA.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS QC_STATUS,
IF(IFNULL(FB.TTL_SEWING_OUT / FA.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS SEWING_STATUS,
IF(IFNULL(FB.TTL_PACKING_IN / FA.ORDER_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS PACKING_STATUS, 
 FB.START_PROD_DATE, FB.END_PROD_DATE
FROM (
SELECT a.ID_CAPACITY, a.PRODUCTION_MONTH, a.PROD_MONTH, DATE_FORMAT(n.SCH_PROD_MONTH,'%M/%Y') ACTUAL_PROD_MONTH, a.MANUFACTURING_SITE, a.CUSTOMER_NAME,a.CUSTOMER_DIVISION, a.CUSTOMER_PROGRAM,
a.CUSTOMER_SEASON, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO, a.PRODUCT_ITEM_CODE, a.PRODUCT_ITEM_DESCRIPTION, a.ORDER_STYLE_DESCRIPTION,
a.ITEM_COLOR_CODE, a.ITEM_COLOR_NAME, a.MO_NO, a.TARGET_PCD, IFNULL( a.NEW_PLAN_EXFACTORY_DATE,a.PLAN_EXFACTORY_DATE) PLAN_EXFACTORY_DATE, a.FINAL_DELIVERY_DATE,
a.NEW_TARGET_PCD,   a.NEW_FINAL_DELIVERY_DATE, 
SUM(a.MO_QTY) MO_QTY, SUM(a.ORDER_QTY) ORDER_QTY, SUM(n.SCH_QTY) SCH_QTY, 
(SUM(a.ORDER_QTY)-SUM(n.SCH_QTY)) VAR_SCHEDULE_QTY
FROM viewcapacity a 
LEFT JOIN (
	SELECT a.SCH_CAPACITY_ID, a.SCH_PROD_MONTH, SUM(a.SCH_QTY) SCH_QTY
	FROM weekly_prod_schedule a  
	WHERE a.SCH_CAPACITY_ID IN (
			SELECT SCH_CAPACITY_ID FROM viewcapacity WHERE PRODUCTION_MONTH IN (:listMonth)
		)
	GROUP BY a.SCH_CAPACITY_ID
	) n ON a.ID_CAPACITY = n.SCH_CAPACITY_ID
WHERE a.PRODUCTION_MONTH IN ( :listMonth)
GROUP BY  a.ID_CAPACITY -- a.PRODUCTION_MONTH, a.MANUFACTURING_SITE, a.ORDER_NO, a.ORDER_REFERENCE_PO_NO
) FA 
LEFT JOIN (
SELECT 
 S.ID_CAPACITY,
 SUM(S.TTL_SEWING_IN) TTL_SEWING_IN,
SUM(S.TTL_QC_QTY) TTL_QC_QTY,
SUM(S.TTL_SEWING_OUT) TTL_SEWING_OUT,
SUM(S.TTL_PACKING_IN) TTL_PACKING_IN, 
 MIN(S.START_PROD_DATE) START_PROD_DATE, MAX(S.END_PROD_DATE) END_PROD_DATE
FROM (
SELECT 
	M.SCH_ID, M.ID_CAPACITY,
	SUM(M.TTL_SEWING_IN) TTL_SEWING_IN,
	SUM(M.TTL_QC_QTY) TTL_QC_QTY,
	SUM(M.TTL_SEWING_OUT) TTL_SEWING_OUT,
	SUM(M.TTL_PACKING_IN) TTL_PACKING_IN,
	MIN(M.START_PROD_DATE) START_PROD_DATE, MAX(M.END_PROD_DATE) END_PROD_DATE
FROM (
		SELECT a.SCH_ID, b.ID_CAPACITY,
		IFNULL(e.TTL_SEWING_IN, 0) AS TTL_SEWING_IN,
		IFNULL(f.TTL_QC_QTY, 0) AS TTL_QC_QTY,
		IFNULL(g.TTL_SEWING_OUT, 0) AS TTL_SEWING_OUT,
		IFNULL(h.TTL_PACKING_IN, 0) AS TTL_PACKING_IN,
		f.START_PROD_DATE, f.END_PROD_DATE
		FROM weekly_prod_schedule a  
		LEFT JOIN viewcapacity b ON a.SCH_CAPACITY_ID = b.ID_CAPACITY
		LEFT JOIN item_siteline c ON a.SCH_ID_SITELINE = c.ID_SITELINE
		LEFT JOIN (
				   SELECT a.SCH_ID, SUM(b.ORDER_QTY) TTL_SEWING_IN
					FROM scan_sewing_in a 
					LEFT JOIN view_order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
					WHERE a.SCH_ID IN (
							SELECT a.SCH_ID FROM weekly_prod_schedule a WHERE SUBSTRING_INDEX(a.SCH_CAPACITY_ID,'.',-1) IN (:listMonth)
					) GROUP BY a.SCH_ID
		) e ON(a.SCH_ID = e.SCH_ID)
		LEFT JOIN (
				SELECT 
				A.ENDLINE_SCH_ID AS ENDLINE_SCH_ID,
				A.ENDLINE_SCHD_ID AS ENDLINE_SCHD_ID,
				SUM(A.ENDLINE_OUT_QTY) AS TTL_QC_QTY,
				MIN(DATE(A.ENDLINE_ADD_TIME)) START_PROD_DATE, MAX(DATE(A.ENDLINE_ADD_TIME)) END_PROD_DATE
				FROM qc_endline_output A
				WHERE  A.ENDLINE_OUT_UNDO IS NULL
				  AND A.ENDLINE_SCH_ID IN (
						  SELECT a.SCH_ID FROM weekly_prod_schedule a WHERE SUBSTRING_INDEX(a.SCH_CAPACITY_ID,'.',-1) IN ( :listMonth)
				  )
				GROUP BY A.ENDLINE_SCH_ID
		) f ON(a.SCH_ID = f.ENDLINE_SCH_ID )
		LEFT JOIN (
			SELECT a.SCH_ID, SUM(a.ORDER_QTY) TTL_SEWING_OUT
			FROM (
				SELECT DISTINCT  a.SCH_ID, 
				a.BARCODE_MAIN AS BARCODE_SERIAL,
				CASE WHEN  c.BARCODE_SERIAL IS NOT NULL THEN SUM(c.NEW_QTY) ELSE b.ORDER_QTY END AS ORDER_QTY
				FROM scan_packing_in a 
				LEFT JOIN view_order_detail b ON a.BARCODE_MAIN = b.BARCODE_SERIAL
				LEFT JOIN scan_sewing_qr_split c ON c.BARCODE_SERIAL = a.BARCODE_SERIAL
				WHERE a.SCH_ID IN (
					SELECT a.SCH_ID FROM weekly_prod_schedule a WHERE SUBSTRING_INDEX(a.SCH_CAPACITY_ID,'.',-1) IN (:listMonth)
					)
				GROUP BY a.SCH_ID, b.ORDER_SIZE, a.BARCODE_MAIN
		  	) a GROUP BY a.SCH_ID
		) g ON(a.SCH_ID = g.SCH_ID)
		LEFT JOIN (
			SELECT 
				SUM(AB.ORDER_QTY) AS TTL_PACKING_IN,
				AA.SCHD_ID AS SCHD_ID,
				AA.SCH_ID AS SCH_ID
			FROM (scan_packing_in AA
			LEFT JOIN order_detail AB ON(AA.BARCODE_SERIAL = AB.BARCODE_SERIAL))
			WHERE AA.SCH_ID IN (
					  SELECT a.SCH_ID FROM weekly_prod_schedule a WHERE SUBSTRING_INDEX(a.SCH_CAPACITY_ID,'.',-1) IN ( :listMonth)
			  )
			GROUP BY AA.SCH_ID
			) h ON(h.SCH_ID = a.SCH_ID )
		WHERE a.SCH_CAPACITY_ID IN  (
				SELECT ID_CAPACITY FROM viewcapacity WHERE PRODUCTION_MONTH IN ( :listMonth)
		) 
		ORDER BY a.SCH_ID_SITELINE, a.SCH_START_PROD ASC
	) M 
	 GROUP BY M.SCH_ID
) S GROUP BY S.ID_CAPACITY 
) FB ON FA.ID_CAPACITY = FB.ID_CAPACITY
ORDER BY FA.PROD_MONTH, FA.MANUFACTURING_SITE, FA.CUSTOMER_NAME, FA.CUSTOMER_DIVISION, 
FA.ORDER_NO, FA.ORDER_REFERENCE_PO_NO, FA.PRODUCT_ITEM_CODE, FA.PLAN_EXFACTORY_DATE
`;

export const QuerydetailOneCap = `SELECT FA.SCH_ID, FA.ID_CAPACITY, FA.SCH_SITE, FA.LINE_NAME, FA.ORDER_REFERENCE_PO_NO,
FA.MO_QTY, FA.ORDER_QTY, FA.SCH_QTY, 
FA.TTL_SEWING_IN TTL_SEWING_IN,
FA.TTL_QC_QTY TTL_QC_QTY,
FA.TTL_SEWING_OUT TTL_SEWING_OUT,
FA.TTL_PACKING_IN TTL_PACKING_IN,
IFNULL((FA.SCH_QTY-FA.TTL_SEWING_IN), 0) VAR_LOADING,
IFNULL((FA.SCH_QTY-FA.TTL_QC_QTY), 0) VAR_QC,
IFNULL((FA.SCH_QTY-FA.TTL_SEWING_OUT), 0) VAR_ORDER_SEWING,
IFNULL((FA.SCH_QTY-FA.TTL_PACKING_IN), 0) VAR_ORDER_PACKING,
ROUND((IFNULL(FA.SCH_QTY / FA.ORDER_QTY, 0) * 100), 2) AS TTL_SCHEDULE_PERCENTAGE,
ROUND((IFNULL(FA.TTL_SEWING_IN / FA.SCH_QTY, 0) * 100), 2) AS TTL_LOADING_PERCENTAGE,
ROUND((IFNULL(FA.TTL_QC_QTY / FA.SCH_QTY, 0) * 100), 2) AS TTL_QC_PERCENTAGE,
ROUND((IFNULL(FA.TTL_SEWING_OUT / FA.SCH_QTY, 0) * 100), 2) AS TTL_SEWING_PERCENTAGE,
ROUND((IFNULL(FA.TTL_PACKING_IN / FA.SCH_QTY, 0) * 100), 2) AS TTL_PACKING_PERCENTAGE,
IF(IFNULL(FA.SCH_QTY / FA.SCH_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS SCHEDULE_STATUS,
IF(IFNULL(FA.TTL_SEWING_IN / FA.SCH_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS LOADING_STATUS,
IF(IFNULL(FA.TTL_QC_QTY / FA.SCH_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS QC_STATUS,
IF(IFNULL(FA.TTL_SEWING_OUT / FA.SCH_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS SEWING_STATUS,
IF(IFNULL(FA.TTL_PACKING_IN / FA.SCH_QTY, 0) * 100 >= 100, 'Complete', 'Open') AS PACKING_STATUS, 
 FA.START_PROD_DATE, FA.END_PROD_DATE
FROM (
	SELECT 
	    M.SCH_ID, M.ID_CAPACITY, M.SCH_SITE, M.LINE_NAME, M.ORDER_REFERENCE_PO_NO,
	    SUM(M.ORDER_QTY) ORDER_QTY,
	    SUM(M.MO_QTY) MO_QTY,
	    SUM(M.SCH_QTY) SCH_QTY,
	    SUM(M.TTL_SEWING_IN) TTL_SEWING_IN,
	    SUM(M.TTL_QC_QTY) TTL_QC_QTY,
	    SUM(M.TTL_SEWING_OUT) TTL_SEWING_OUT,
	    SUM(M.TTL_PACKING_IN) TTL_PACKING_IN,
	    MIN(M.START_PROD_DATE) START_PROD_DATE, MAX(M.END_PROD_DATE) END_PROD_DATE
	FROM (
	        SELECT a.SCH_ID, b.ID_CAPACITY, a.SCH_SITE, c.LINE_NAME, b.ORDER_REFERENCE_PO_NO,
	        IFNULL(b.ORDER_QTY, 0) AS ORDER_QTY,
	        IFNULL(b.MO_QTY, 0) AS MO_QTY,
	        IFNULL(a.SCH_QTY, 0) AS SCH_QTY,
	        IFNULL(e.TTL_SEWING_IN, 0) AS TTL_SEWING_IN,
	        IFNULL(f.TTL_QC_QTY, 0) AS TTL_QC_QTY,
	        IFNULL(g.TTL_SEWING_OUT, 0) AS TTL_SEWING_OUT,
	        IFNULL(h.TTL_PACKING_IN, 0) AS TTL_PACKING_IN,
	        f.START_PROD_DATE, f.END_PROD_DATE
	        FROM weekly_prod_schedule a  
	        LEFT JOIN viewcapacity b ON a.SCH_CAPACITY_ID = b.ID_CAPACITY
	        LEFT JOIN item_siteline c ON a.SCH_ID_SITELINE = c.ID_SITELINE
	        LEFT JOIN (
					   SELECT a.SCH_ID, SUM(b.ORDER_QTY) TTL_SEWING_IN
						FROM scan_sewing_in a 
						LEFT JOIN view_order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
						WHERE a.SCH_ID IN (
									SELECT a.SCH_ID FROM weekly_prod_schedule a WHERE a.SCH_CAPACITY_ID = :idCapacity
						) GROUP BY a.SCH_ID
	        ) e ON(a.SCH_ID = e.SCH_ID)
	        LEFT JOIN (
		       	 SELECT 
		            A.ENDLINE_SCH_ID AS ENDLINE_SCH_ID,
		            A.ENDLINE_SCHD_ID AS ENDLINE_SCHD_ID,
		            SUM(A.ENDLINE_OUT_QTY) AS TTL_QC_QTY,
		            MIN(DATE(A.ENDLINE_ADD_TIME)) START_PROD_DATE, MAX(DATE(A.ENDLINE_ADD_TIME)) END_PROD_DATE
			        FROM qc_endline_output A
			        WHERE  A.ENDLINE_OUT_UNDO IS NULL
			      	AND A.ENDLINE_SCH_ID IN (
					  		SELECT a.SCH_ID FROM weekly_prod_schedule a WHERE a.SCH_CAPACITY_ID = :idCapacity
					  )
			        GROUP BY A.ENDLINE_SCH_ID
	        ) f ON(a.SCH_ID = f.ENDLINE_SCH_ID )
	        LEFT JOIN (
				SELECT a.SCH_ID, SUM(a.ORDER_QTY) TTL_SEWING_OUT
				FROM (
					SELECT DISTINCT  a.SCH_ID, 
					a.BARCODE_MAIN AS BARCODE_SERIAL,
					CASE WHEN  c.BARCODE_SERIAL IS NOT NULL THEN SUM(c.NEW_QTY) ELSE b.ORDER_QTY END AS ORDER_QTY
					FROM scan_sewing_out a 
					LEFT JOIN view_order_detail b ON a.BARCODE_MAIN = b.BARCODE_SERIAL
					LEFT JOIN scan_sewing_qr_split c ON c.BARCODE_SERIAL = a.BARCODE_SERIAL
					WHERE a.SCH_ID IN (
						SELECT a.SCH_ID FROM weekly_prod_schedule a WHERE a.SCH_CAPACITY_ID = :idCapacity
						)
					GROUP BY a.SCH_ID, b.ORDER_SIZE, a.BARCODE_MAIN
				  ) a GROUP BY a.SCH_ID
	        ) g ON(a.SCH_ID = g.SCH_ID)
	        LEFT JOIN (
		        SELECT a.SCH_ID, SUM(a.ORDER_QTY) TTL_PACKING_IN
				FROM (
					SELECT DISTINCT  a.SCH_ID, 
					a.BARCODE_MAIN AS BARCODE_SERIAL,
					CASE WHEN  c.BARCODE_SERIAL IS NOT NULL THEN SUM(c.NEW_QTY) ELSE b.ORDER_QTY END AS ORDER_QTY
					FROM scan_packing_in a 
					LEFT JOIN view_order_detail b ON a.BARCODE_MAIN = b.BARCODE_SERIAL
					LEFT JOIN scan_sewing_qr_split c ON c.BARCODE_SERIAL = a.BARCODE_SERIAL
					WHERE a.SCH_ID IN (
						SELECT a.SCH_ID FROM weekly_prod_schedule a WHERE a.SCH_CAPACITY_ID = :idCapacity
						)
					GROUP BY a.SCH_ID, b.ORDER_SIZE, a.BARCODE_MAIN
				  ) a GROUP BY a.SCH_ID
	        ) h ON(h.SCH_ID = a.SCH_ID )
	        WHERE a.SCH_CAPACITY_ID = :idCapacity
	        ORDER BY a.SCH_ID_SITELINE, a.SCH_START_PROD ASC
	    ) M 
		 GROUP BY M.SCH_ID
) FA`;

export const QueryDetailRepSchSize = `SELECT FA.SCH_ID, FA.SIZE_CODE, 
FA.MO_QTY, FA.ORDER_QTY, FA.SCH_QTY, 
FA.TTL_SEWING_IN TTL_SEWING_IN,
FA.TTL_QC_QTY TTL_QC_QTY,
FA.TTL_SEWING_OUT TTL_SEWING_OUT,
FA.TTL_PACKING_IN TTL_PACKING_IN,
IFNULL((FA.SCH_QTY-FA.TTL_SEWING_IN), 0) VAR_LOADING,
IFNULL((FA.SCH_QTY-FA.TTL_QC_QTY), 0) VAR_QC,
IFNULL((FA.SCH_QTY-FA.TTL_SEWING_OUT), 0) VAR_ORDER_SEWING,
IFNULL((FA.SCH_QTY-FA.TTL_PACKING_IN), 0) VAR_ORDER_PACKING,
FA.START_PROD_DATE, FA.END_PROD_DATE
FROM (
	SELECT 
	    M.SCH_ID, M.SIZE_CODE,
	    SUM(M.ORDER_QTY) ORDER_QTY,
	    SUM(M.MO_QTY) MO_QTY,
	    SUM(M.SCH_QTY) SCH_QTY,
	    SUM(M.TTL_SEWING_IN) TTL_SEWING_IN,
	    SUM(M.TTL_QC_QTY) TTL_QC_QTY,
	    SUM(M.TTL_SEWING_OUT) TTL_SEWING_OUT,
	    SUM(M.TTL_PACKING_IN) TTL_PACKING_IN,
	    MIN(M.START_PROD_DATE) START_PROD_DATE, MAX(M.END_PROD_DATE) END_PROD_DATE
	FROM (
	        SELECT a.SCH_ID, a.SIZE_CODE,
	        IFNULL(b.ORDER_QTY, 0) AS ORDER_QTY,
	        IFNULL(b.MO_QTY, 0) AS MO_QTY,
	        IFNULL(a.SCH_SIZE_QTY, 0) AS SCH_QTY,
	        IFNULL(e.TTL_SEWING_IN, 0) AS TTL_SEWING_IN,
	        IFNULL(f.TTL_QC_QTY, 0) AS TTL_QC_QTY,
	        IFNULL(g.TTL_SEWING_OUT, 0) AS TTL_SEWING_OUT,
	        IFNULL(h.TTL_PACKING_IN, 0) AS TTL_PACKING_IN,
	        f.START_PROD_DATE, f.END_PROD_DATE
	        FROM weekly_sch_size a  
	        LEFT JOIN viewcapacity b ON a.ID_CAPACITY = b.ID_CAPACITY
	        LEFT JOIN (
					   SELECT a.SCH_ID, b.ORDER_SIZE, SUM(b.ORDER_QTY) TTL_SEWING_IN
						FROM scan_sewing_in a 
						LEFT JOIN view_order_detail b ON a.BARCODE_SERIAL = b.BARCODE_SERIAL
						WHERE a.SCH_ID  = :schId
						GROUP BY a.SCH_ID, b.ORDER_SIZE
	        ) e ON(a.SCH_ID = e.SCH_ID AND a.SIZE_CODE = e.ORDER_SIZE)
	        LEFT JOIN (
						SELECT  
						a.ENDLINE_SCH_ID, 
						a.ENDLINE_PLAN_SIZE, 
						SUM(a.ENDLINE_OUT_QTY) AS TTL_QC_QTY,
						 MIN(DATE(a.ENDLINE_ADD_TIME)) START_PROD_DATE, MAX(DATE(a.ENDLINE_ADD_TIME)) END_PROD_DATE
						FROM qc_endline_output a 
						WHERE   
							a.ENDLINE_SCH_ID = :schId AND 
							(
								(a.ENDLINE_OUT_TYPE = 'RTT' AND a.ENDLINE_OUT_UNDO IS NULL) OR 
								(a.ENDLINE_OUT_TYPE <> 'BS' AND a.ENDLINE_OUT_UNDO IS NULL AND a.ENDLINE_REPAIR = 'Y' AND a.ENDLINE_ACT_RPR_SCHD_ID IS NOT NULL)
							)
						GROUP BY 
							a.ENDLINE_SCH_ID, 
							a.ENDLINE_PLAN_SIZE
	        ) f ON(a.SCH_ID = f.ENDLINE_SCH_ID AND f.ENDLINE_PLAN_SIZE = a.SIZE_CODE  )
	        LEFT JOIN (
				SELECT a.SCH_ID, a.ORDER_SIZE, SUM(a.ORDER_QTY) TTL_SEWING_OUT
				FROM (
					SELECT DISTINCT  a.SCH_ID, b.ORDER_SIZE,
					a.BARCODE_MAIN AS BARCODE_SERIAL,
					CASE WHEN  c.BARCODE_SERIAL IS NOT NULL THEN SUM(c.NEW_QTY) ELSE b.ORDER_QTY END AS ORDER_QTY
					FROM scan_sewing_out a 
					LEFT JOIN view_order_detail b ON a.BARCODE_MAIN = b.BARCODE_SERIAL
					LEFT JOIN scan_sewing_qr_split c ON c.BARCODE_SERIAL = a.BARCODE_SERIAL
					WHERE a.SCH_ID = :schId
					GROUP BY a.SCH_ID, b.ORDER_SIZE, a.BARCODE_MAIN
				) a GROUP BY a.SCH_ID, a.ORDER_SIZE
	        ) g ON(a.SCH_ID = g.SCH_ID AND a.SIZE_CODE = g.ORDER_SIZE)
	        LEFT JOIN (
				SELECT a.SCH_ID, a.ORDER_SIZE, SUM(a.ORDER_QTY) TTL_PACKING_IN
				FROM (
					SELECT DISTINCT  a.SCH_ID, b.ORDER_SIZE,
					a.BARCODE_MAIN AS BARCODE_SERIAL,
					CASE WHEN  c.BARCODE_SERIAL IS NOT NULL THEN SUM(c.NEW_QTY) ELSE b.ORDER_QTY END AS ORDER_QTY
					FROM scan_packing_in a 
					LEFT JOIN view_order_detail b ON a.BARCODE_MAIN = b.BARCODE_SERIAL
					LEFT JOIN scan_sewing_qr_split c ON c.BARCODE_SERIAL = a.BARCODE_SERIAL
					WHERE a.SCH_ID = :schId
					GROUP BY a.SCH_ID, b.ORDER_SIZE, a.BARCODE_MAIN
				) a GROUP BY a.SCH_ID, a.ORDER_SIZE
	        	) h ON(h.SCH_ID = a.SCH_ID AND a.SIZE_CODE = h.ORDER_SIZE)
	        WHERE a.SCH_ID = :schId AND a.SCH_SIZE_QTY <> 0
	    ) M 
		 GROUP BY M.SCH_ID, M.SIZE_CODE
) FA`;
