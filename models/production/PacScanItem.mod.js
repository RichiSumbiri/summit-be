import { DataTypes } from "sequelize";
import db from "../../config/database.js";

export const qryGetListPoBuyer = `SELECT DISTINCT
	a.BUYER_PO
FROM packing_plan_child a
LEFT JOIN packing_plan_header b ON b.PACKPLAN_ID = a.PACKPLAN_ID
 WHERE a.BUYER_PO LIKE  :qryPO --  b.PACKPLAN_EX_FACTORY > CURDATE() AND`;

export const qryGetRowByPoBuyer = `		SELECT a.ROWID, a.PACKPLAN_ID, e.PACKPLAN_EX_FACTORY, 
	 SUBSTRING_INDEX(SUBSTRING_INDEX(a.ROWID, '|', 4), '|', -1) PACKING_METHODE,
	 h.COUNTRY_NAME, a.ROW_TYPE, a.BOX_ID, a.CTN_START, a.CTN_END, a.PO_INDEX, a.COL_INDEX,
	 a.ROW_INDEX, a.BUYER_PO, a.BUYER_COLOR_CODE, a.BOX_CODE, a.SIZE_CODE,    a.SHIPMENT_QTY,
	 a.AFTER_SET_QTY, a.QTY_PER_BOX, a.TTL_QTY_BOX, a.TTL_BOX,
	 c.LENGTH_CM, c.WIDTH_CM, c.HEIGHT_CM, c.WEIGHT,  IFNULL(a.GW,'') GW, IFNULL(a.NW,'') NW,
	 b.PRODUCT_ITEM_CODE, b.BUYER_COLOR_NAME , SUBSTRING_INDEX(a.ROWID, '|', 4) AS PLAN_SEQUANCE_ID,
	 IFNULL(a.PO_ITEM,d.PO_ITEM) PO_ITEM, IFNULL(a.ARTICLE, d.ARTICLE) ARTICLE, IFNULL(d.UPC_CODE, a.UPC_CODE) UPC_CODE,
	 d.ARTICLE_GENERIC, d.COLOR_CODE,  d.VENDOR,
	 d.SEGMENT, d.PACKING,  d.COLOR_DESCRIPTION, g.RESULT_INDEX
	 FROM 
	packing_plan_box_row a 
	LEFT JOIN packing_plan_po_sum b ON b.PACKPLAN_ID = a.PACKPLAN_ID 
			AND a.BUYER_PO = b.BUYER_PO 
			AND a.BUYER_COLOR_CODE = b.BUYER_COLOR_CODE
	      AND SUBSTRING_INDEX(a.ROWID, '|', 4) = b.PLAN_SEQUANCE_ID
	LEFT JOIN item_country h ON h.COUNTRY_ID = SUBSTRING_INDEX(SUBSTRING_INDEX(a.ROWID, '|', 3), '|', -1)
	LEFT JOIN item_carton_list c ON c.BOX_ID = a.BOX_ID
	LEFT JOIN (
			SELECT 
			f.PO_NUMBER, f.PO_ITEM, f.ARTICLE_GENERIC, f.COLOR_CODE, f.SIZE_CODE, f.UPC_CODE, f.VENDOR,
			f.SEGMENT, f.ARTICLE, f.COLOR_DESCRIPTION, d.PACKING,
			CASE WHEN f.SEGMENT = 'OTH_E' THEN 'ECOM'
				  WHEN f.ARTICLE_TYPE = 'PAC' THEN 'PREPACK'
			ELSE 'SOLID' END AS PACKING_METHODE
			FROM order_po_buyer f
			LEFT JOIN bri_segment_key d ON d.SEGMENT = f.SEGMENT
			WHERE f.PO_NUMBER = :poBuyer
			GROUP BY f.PO_NUMBER, f.ARTICLE_GENERIC, f.PO_ITEM, f.COLOR_CODE, f.SIZE_CODE
	) d ON d.PO_NUMBER = a.BUYER_PO 
	AND a.BUYER_COLOR_CODE = d.COLOR_CODE 
	AND a.SIZE_CODE = d.SIZE_CODE 
	AND b.PACKING_METHODE = d.PACKING_METHODE
	AND FIND_IN_SET( LEFT(d.ARTICLE_GENERIC,6), LEFT(b.PRODUCT_ITEM_CODE, 6)) > 0 AND a.PO_ITEM = d.PO_ITEM 
	 LEFT JOIN packing_plan_header e ON e.PACKPLAN_ID = b.PACKPLAN_ID 
	 LEFT JOIN (
	 	 SELECT
			a.ROWID, MAX(a.INDEX_CTN) RESULT_INDEX
		 FROM packing_item_scan a
		 WHERE a.BUYER_PO = :poBuyer
		 GROUP BY a.ROWID
	 ) g ON g.ROWID = a.ROWID
	WHERE a.BUYER_PO =  :poBuyer AND SUBSTRING_INDEX(SUBSTRING_INDEX(a.ROWID, '|', 4), '|', -1) <> 'PREPACK'
		UNION ALL
	SELECT a.ROWID, a.PACKPLAN_ID, e.PACKPLAN_EX_FACTORY, 
	 SUBSTRING_INDEX(SUBSTRING_INDEX(a.ROWID, '|', 4), '|', -1) PACKING_METHODE,
	 h.COUNTRY_NAME, a.ROW_TYPE, a.BOX_ID, a.CTN_START, a.CTN_END, a.PO_INDEX, a.COL_INDEX,
	 a.ROW_INDEX, a.BUYER_PO, a.BUYER_COLOR_CODE, a.BOX_CODE, a.SIZE_CODE,    a.SHIPMENT_QTY,
	 a.AFTER_SET_QTY, a.QTY_PER_BOX, a.TTL_QTY_BOX, a.TTL_BOX,
	 c.LENGTH_CM, c.WIDTH_CM, c.HEIGHT_CM, c.WEIGHT,  IFNULL(a.GW,'') GW, IFNULL(a.NW,'') NW,
	 b.PRODUCT_ITEM_CODE, b.BUYER_COLOR_NAME , SUBSTRING_INDEX(a.ROWID, '|', 4) AS PLAN_SEQUANCE_ID,
	 IFNULL(a.PO_ITEM,d.PO_ITEM) PO_ITEM, IFNULL(a.ARTICLE, d.ARTICLE) ARTICLE, IFNULL(d.UPC_CODE, a.UPC_CODE) UPC_CODE,
	 d.ARTICLE_GENERIC, d.COLOR_CODE, d.VENDOR,
	 d.SEGMENT, 'HANG' AS PACKING, d.COLOR_DESCRIPTION, g.RESULT_INDEX
	 FROM 
	packing_plan_box_row a 
	LEFT JOIN packing_plan_po_sum b ON b.PACKPLAN_ID = a.PACKPLAN_ID 
			AND a.BUYER_PO = b.BUYER_PO 
			AND a.BUYER_COLOR_CODE = b.BUYER_COLOR_CODE
	      AND SUBSTRING_INDEX(a.ROWID, '|', 4) = b.PLAN_SEQUANCE_ID
	LEFT JOIN item_country h ON h.COUNTRY_ID = SUBSTRING_INDEX(SUBSTRING_INDEX(a.ROWID, '|', 3), '|', -1)
	LEFT JOIN item_carton_list c ON c.BOX_ID = a.BOX_ID
	LEFT JOIN order_po_buyer d ON a.UPC_CODE = d.UPC_CODE AND a.PO_ITEM = d.PO_ITEM AND a.BUYER_PO = d.PO_NUMBER AND 
	FIND_IN_SET( LEFT(d.ARTICLE_GENERIC,6), LEFT(b.PRODUCT_ITEM_CODE, 6)) > 0
	LEFT JOIN bri_segment_key f ON f.SEGMENT = d.SEGMENT
	 LEFT JOIN packing_plan_header e ON e.PACKPLAN_ID = b.PACKPLAN_ID 
	 LEFT JOIN (
	 	 SELECT
			a.ROWID, MAX(a.INDEX_CTN) RESULT_INDEX
		 FROM packing_item_scan a
		 WHERE a.BUYER_PO = :poBuyer
		 GROUP BY a.ROWID
	 ) g ON g.ROWID = a.ROWID
	WHERE a.BUYER_PO =  :poBuyer AND SUBSTRING_INDEX(SUBSTRING_INDEX(a.ROWID, '|', 4), '|', -1) = 'PREPACK'`;

export const qryGetDtlRowByr = `SELECT a.ROWID, a.PACKPLAN_ID, a.SIZE_CODE, a.QTY , (a.QTY*b.TTL_BOX) TTL_QTY, b.BUYER_COLOR_CODE,
d.PO_ITEM, d.ARTICLE_GENERIC, d.UPC_CODE, d.PC_PER_PACK
FROM pack_plan_row_detail a 
LEFT JOIN packing_plan_box_row  b ON a.ROWID = b.ROWID
LEFT JOIN packing_plan_po_sum c ON c.PACKPLAN_ID = b.PACKPLAN_ID 
		AND b.BUYER_PO = c.BUYER_PO 
		AND b.BUYER_COLOR_CODE = c.BUYER_COLOR_CODE
      AND SUBSTRING_INDEX(b.ROWID, '|', 4) = c.PLAN_SEQUANCE_ID
LEFT JOIN (
		SELECT 
		f.PO_NUMBER, f.PO_ITEM, f.ARTICLE_GENERIC, f.COLOR_CODE, f.SIZE_CODE, f.UPC_CODE, f.PC_PER_PACK
		FROM order_po_buyer_detail f
		WHERE f.PO_NUMBER = :poBuyer
      GROUP BY f.PO_NUMBER, f.ARTICLE_GENERIC,  f.COLOR_CODE, f.SIZE_CODE -- f.PO_ITEM,
	  ) d ON d.PO_NUMBER = b.BUYER_PO AND b.BUYER_COLOR_CODE = d.COLOR_CODE AND a.SIZE_CODE = d.SIZE_CODE
	  AND a.SIZE_CODE = d.SIZE_CODE AND 
		FIND_IN_SET( LEFT(d.ARTICLE_GENERIC,6), LEFT(c.PRODUCT_ITEM_CODE, 6)) > 0
WHERE a.ROWID IN (
	SELECT c.ROWID FROM  packing_plan_box_row c WHERE c.BUYER_PO = :poBuyer
)`;

export const PackItemScan = db.define(
  "packing_item_scan",
  {
    ROWID: {
      type: DataTypes.STRING,
      primaryKey: true,
    },
    UNIX_BOX_NO: { type: DataTypes.STRING },
    PACKPLAN_ID: { type: DataTypes.STRING },
    BUYER_PO: { type: DataTypes.STRING },
    UPC_CODE: { type: DataTypes.STRING },
    PO_ITEM: { type: DataTypes.STRING },
    INDEX_CTN: { type: DataTypes.INTEGER },
    ADD_ID: { type: DataTypes.INTEGER },
    MOD_ID: { type: DataTypes.INTEGER },
    SCAN_TIME: { type: DataTypes.DATE },
    MOD_TIME: { type: DataTypes.DATE },
  },
  {
    freezeTableName: true,
    createdAt: "SCAN_TIME",
    updatedAt: "MOD_TIME",
  }
);

export const qryGetBoxUnix = `SELECT CAST(SUBSTRING(a.UNIX_BOX_NO,15) AS INTEGER)+1 LAST_ID
FROM packing_item_scan a 
WHERE a.PACKPLAN_ID = :ppid
ORDER BY a.SCAN_TIME DESC
LIMIT 1`;

export const qryGetLastIndex = `SELECT a.INDEX_CTN+1 LAST_INDEX
FROM packing_item_scan a 
WHERE a.ROWID = :rowId
ORDER BY a.SCAN_TIME DESC
LIMIT 1`;

///REPORT
export const qryLisPoByrWthOutput = `SELECT 
	a.VENDOR, a.PO_NUMBER, a.EX_FACTORY, a.PO_ITEM, a.SEGMENT, a.ARTICLE_GENERIC, a.ARTICLE, a.COLOR_CODE, a.COLOR_DESCRIPTION, a.UPC_CODE, a.SIZE_CODE, SUM(a.QTY) QTY,
	SUM(b.SHIPMENT_QTY) BOOKING_QTY, SUM(c.SCAN_QTY) SCAN_QTY
FROM order_po_buyer a 
LEFT JOIN packing_plan_box_row b 
	ON b.BUYER_PO = a.PO_NUMBER 
	AND b.UPC_CODE = a.UPC_CODE
	AND a.PO_ITEM = b.PO_ITEM 
--	AND LEFT(a.ARTICLE_GENERIC,7) = LEFT(b.ARTICLE,7)
LEFT JOIN (
	SELECT a.ROWID, a.BUYER_PO, a.PO_ITEM, a.UPC_CODE, SUM(b.QTY_PER_BOX) SCAN_QTY
	FROM packing_item_scan a 
	LEFT JOIN packing_plan_box_row b ON b.ROWID = a.ROWID
	LEFT JOIN packing_plan_header c ON b.PACKPLAN_ID = c.PACKPLAN_ID 
	WHERE c.PACKPLAN_EX_FACTORY BETWEEN :start  AND :end 
	GROUP BY a.ROWID, a.BUYER_PO, a.PO_ITEM, a.UPC_CODE
	ORDER BY c.PACKPLAN_EX_FACTORY, a.BUYER_PO, a.PO_ITEM, a.UPC_CODE
) c ON c.BUYER_PO = a.PO_NUMBER 
	AND c.UPC_CODE = a.UPC_CODE
	AND c.PO_ITEM = b.PO_ITEM  
WHERE a.EX_FACTORY BETWEEN :start  AND :end
GROUP BY a.VENDOR, a.PO_NUMBER, a.EX_FACTORY, a.PO_ITEM, a.SEGMENT, a.ARTICLE_GENERIC, a.COLOR_CODE,  a.UPC_CODE, a.SIZE_CODE`;
